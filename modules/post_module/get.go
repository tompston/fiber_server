package post_module

import (
	"context"
	"gofiber_server/db/sqlc"
	"gofiber_server/settings/database"
	"gofiber_server/utils/pagitation"
	res "gofiber_server/utils/response"
	"strconv"

	"github.com/gofiber/fiber/v2"
)

func GetAllPosts(c *fiber.Ctx) error {

	db, err := database.GetDbConn()
	if err != nil {
		return res.ResponseError(c, nil, err.Error())
	}
	defer db.Close()

	pag_param, err := pagitation.GetPagitationParams(c, BASE)
	if err != nil {
		return res.ResponseError(c, nil, res.PageQueryIsNotIntMessage)
	}
	// assign the limit offset values to a struct that will be passed to the query generated by sqlc
	limit_offset := sqlc.GetPostsParams{Limit: pag_param.Limit, Offset: pag_param.Offset}

	data, err := sqlc.New(db).GetPosts(context.Background(), limit_offset)
	if err != nil {
		return res.ResponseError(c, nil, err.Error())
	}

	message := res.FoundManyMessage(module_name)
	if len(data) == 0 {
		message = res.NotFoundManyMessage(module_name)
	}
	if len(data) < int(pag_param.Limit) {
		pag_param.PagitationLinks.NextPage = "null"
	}

	return res.ResponseSuccessWithPagitation(c, data, pag_param.PagitationLinks, message)
}

func GetPost(c *fiber.Ctx) error {

	id, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		return res.ResponseError(c, nil, res.ParamIsNotIntMessage)
	}

	db, err := database.GetDbConn()
	if err != nil {
		return res.ResponseError(c, nil, err.Error())
	}
	defer db.Close()

	data, err := sqlc.New(db).GetPost(context.Background(), int64(id))
	if err != nil {
		return res.ResponseError(c, nil, res.NotFoundOneMessage(module_name))
	}

	return res.ResponseSuccess(c, data, res.FoundOneMessage(module_name))
}

func GetPostsFromUser(c *fiber.Ctx) error {

	username := c.Params("username")

	db, err := database.GetDbConn()
	if err != nil {
		return res.ResponseError(c, nil, err.Error())
	}
	defer db.Close()

	data, err := sqlc.New(db).GetPostsFromUser(context.Background(), username)

	if len(data) == 0 {
		return res.ResponseError(c, nil, "No posts found for the user!")
	}
	if err != nil {
		return res.ResponseError(c, nil, err.Error())
	}

	return res.ResponseSuccess(c, data, "Posts for the User Found!")
}
