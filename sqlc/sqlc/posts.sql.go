// Code generated by sqlc. DO NOT EDIT.
// source: posts.sql

package sqlc

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts   ( post_title, post_body, user_id  ) 
VALUES              ( $1, $2, $3 )
RETURNING post_id, created_at, updated_at, post_title, post_body, user_id
`

type CreatePostParams struct {
	PostTitle string `json:"post_title"`
	PostBody  string `json:"post_body"`
	UserID    int32  `json:"user_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.PostTitle, arg.PostBody, arg.UserID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostTitle,
		&i.PostBody,
		&i.UserID,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE post_id = $1
`

func (q *Queries) DeletePost(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT post_id, created_at, post_title, post_body, user_id 
FROM posts
WHERE  post_id = $1 LIMIT 1
`

type GetPostRow struct {
	PostID    int64     `json:"post_id"`
	CreatedAt time.Time `json:"created_at"`
	PostTitle string    `json:"post_title"`
	PostBody  string    `json:"post_body"`
	UserID    int32     `json:"user_id"`
}

func (q *Queries) GetPost(ctx context.Context, postID int64) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, postID)
	var i GetPostRow
	err := row.Scan(
		&i.PostID,
		&i.CreatedAt,
		&i.PostTitle,
		&i.PostBody,
		&i.UserID,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT 
     posts.post_id, posts.created_at, posts.post_title, posts.post_body, posts.user_id,
     users.username
FROM posts
INNER JOIN users
ON posts.user_id = users.user_id
ORDER BY posts.created_at DESC
LIMIT $1 OFFSET $2
`

type GetPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPostsRow struct {
	PostID    int64     `json:"post_id"`
	CreatedAt time.Time `json:"created_at"`
	PostTitle string    `json:"post_title"`
	PostBody  string    `json:"post_body"`
	UserID    int32     `json:"user_id"`
	Username  string    `json:"username"`
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.PostID,
			&i.CreatedAt,
			&i.PostTitle,
			&i.PostBody,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsFromUser = `-- name: GetPostsFromUser :many
SELECT
     posts.post_id, posts.created_at, posts.post_title, posts.post_body, posts.user_id,
     users.username
FROM posts
INNER JOIN users
ON posts.user_id = users.user_id
WHERE users.username = $1
`

type GetPostsFromUserRow struct {
	PostID    int64     `json:"post_id"`
	CreatedAt time.Time `json:"created_at"`
	PostTitle string    `json:"post_title"`
	PostBody  string    `json:"post_body"`
	UserID    int32     `json:"user_id"`
	Username  string    `json:"username"`
}

func (q *Queries) GetPostsFromUser(ctx context.Context, username string) ([]GetPostsFromUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsFromUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsFromUserRow
	for rows.Next() {
		var i GetPostsFromUserRow
		if err := rows.Scan(
			&i.PostID,
			&i.CreatedAt,
			&i.PostTitle,
			&i.PostBody,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostBody = `-- name: UpdatePostBody :one
UPDATE posts 
SET post_body = $1
WHERE post_id = $2
RETURNING posts.post_id, posts.updated_at, posts.post_title
`

type UpdatePostBodyParams struct {
	PostBody string `json:"post_body"`
	PostID   int64  `json:"post_id"`
}

type UpdatePostBodyRow struct {
	PostID    int64     `json:"post_id"`
	UpdatedAt time.Time `json:"updated_at"`
	PostTitle string    `json:"post_title"`
}

func (q *Queries) UpdatePostBody(ctx context.Context, arg UpdatePostBodyParams) (UpdatePostBodyRow, error) {
	row := q.db.QueryRowContext(ctx, updatePostBody, arg.PostBody, arg.PostID)
	var i UpdatePostBodyRow
	err := row.Scan(&i.PostID, &i.UpdatedAt, &i.PostTitle)
	return i, err
}

const updatePostTitle = `-- name: UpdatePostTitle :one
UPDATE posts 
SET post_title = $1
WHERE post_id = $2
RETURNING posts.post_id, posts.updated_at, posts.post_title
`

type UpdatePostTitleParams struct {
	PostTitle string `json:"post_title"`
	PostID    int64  `json:"post_id"`
}

type UpdatePostTitleRow struct {
	PostID    int64     `json:"post_id"`
	UpdatedAt time.Time `json:"updated_at"`
	PostTitle string    `json:"post_title"`
}

func (q *Queries) UpdatePostTitle(ctx context.Context, arg UpdatePostTitleParams) (UpdatePostTitleRow, error) {
	row := q.db.QueryRowContext(ctx, updatePostTitle, arg.PostTitle, arg.PostID)
	var i UpdatePostTitleRow
	err := row.Scan(&i.PostID, &i.UpdatedAt, &i.PostTitle)
	return i, err
}
